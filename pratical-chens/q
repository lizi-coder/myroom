SELECT(2)                                                               Linux Programmer's Manual                                                              SELECT(2)

NNAAMMEE
       select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - synchronous I/O multiplexing

SSYYNNOOPPSSIISS
       /* According to POSIX.1-2001, POSIX.1-2008 */
       ##iinncclluuddee <<ssyyss//sseelleecctt..hh>>

       /* According to earlier standards */
       ##iinncclluuddee <<ssyyss//ttiimmee..hh>>
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<uunniissttdd..hh>>

       iinntt sseelleecctt((iinntt _n_f_d_s,, ffdd__sseett **_r_e_a_d_f_d_s,, ffdd__sseett **_w_r_i_t_e_f_d_s,,
                  ffdd__sseett **_e_x_c_e_p_t_f_d_s,, ssttrruucctt ttiimmeevvaall **_t_i_m_e_o_u_t));;

       vvooiidd FFDD__CCLLRR((iinntt _f_d,, ffdd__sseett **_s_e_t));;
       iinntt  FFDD__IISSSSEETT((iinntt _f_d,, ffdd__sseett **_s_e_t));;
       vvooiidd FFDD__SSEETT((iinntt _f_d,, ffdd__sseett **_s_e_t));;
       vvooiidd FFDD__ZZEERROO((ffdd__sseett **_s_e_t));;

       ##iinncclluuddee <<ssyyss//sseelleecctt..hh>>

       iinntt ppsseelleecctt((iinntt _n_f_d_s,, ffdd__sseett **_r_e_a_d_f_d_s,, ffdd__sseett **_w_r_i_t_e_f_d_s,,
                   ffdd__sseett **_e_x_c_e_p_t_f_d_s,, ccoonnsstt ssttrruucctt ttiimmeessppeecc **_t_i_m_e_o_u_t,,
                   ccoonnsstt ssiiggsseett__tt **_s_i_g_m_a_s_k));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ppsseelleecctt(): _POSIX_C_SOURCE >= 200112L

DDEESSCCRRIIPPTTIIOONN
       sseelleecctt()  and  ppsseelleecctt() allow a program to monitor multiple file descriptors, waiting until one or more of the file descriptors become "ready" for some class of
       I/O operation (e.g., input possible).  A file descriptor is considered ready if it is possible to perform a corresponding I/O operation  (e.g.,  rreeaadd(2)  without
       blocking, or a sufficiently small wwrriittee(2)).

       sseelleecctt() can monitor only file descriptors numbers that are less than FFDD__SSEETTSSIIZZEE; ppoollll(2) does not have this limitation.  See BUGS.

       The operation of sseelleecctt() and ppsseelleecctt() is identical, other than these three differences:

       (i)    sseelleecctt() uses a timeout that is a _s_t_r_u_c_t _t_i_m_e_v_a_l (with seconds and microseconds), while ppsseelleecctt() uses a _s_t_r_u_c_t _t_i_m_e_s_p_e_c (with seconds and nanoseconds).

       (ii)   sseelleecctt() may update the _t_i_m_e_o_u_t argument to indicate how much time was left.  ppsseelleecctt() does not change this argument.

       (iii)  sseelleecctt() has no _s_i_g_m_a_s_k argument, and behaves as ppsseelleecctt() called with NULL _s_i_g_m_a_s_k.

       Three independent sets of file descriptors are watched.  The file descriptors listed in _r_e_a_d_f_d_s will be watched to see if characters become available for reading
       (more precisely, to see if a read will not block; in particular, a file descriptor is also ready on end-of-file).  The  file  descriptors  in  _w_r_i_t_e_f_d_s  will  be
       watched  to see if space is available for write (though a large write may still block).  The file descriptors in _e_x_c_e_p_t_f_d_s will be watched for exceptional condi‐
       tions.  (For examples of some exceptional conditions, see the discussion of PPOOLLLLPPRRII in ppoollll(2).)

       On exit, each of the file descriptor sets is modified in place to indicate which file descriptors actually changed status.  (Thus, if  using  sseelleecctt()  within  a
       loop, the sets must be reinitialized before each call.)

       Each of the three file descriptor sets may be specified as NULL if no file descriptors are to be watched for the corresponding class of events.

       Four  macros are provided to manipulate the sets.  FFDD__ZZEERROO() clears a set.  FFDD__SSEETT() and FFDD__CCLLRR() respectively add and remove a given file descriptor from a set.
       FFDD__IISSSSEETT() tests to see if a file descriptor is part of the set; this is useful after sseelleecctt() returns.

       _n_f_d_s should be set to the highest-numbered file descriptor in any of the three sets, plus 1.  The indicated file descriptors in each set are checked, up to  this
       limit (but see BUGS).

       The _t_i_m_e_o_u_t argument specifies the interval that sseelleecctt() should block waiting for a file descriptor to become ready.  The call will block until either:

       *  a file descriptor becomes ready;

       *  the call is interrupted by a signal handler; or

       *  the timeout expires.

       Note  that the _t_i_m_e_o_u_t interval will be rounded up to the system clock granularity, and kernel scheduling delays mean that the blocking interval may overrun by a
       small amount.  If both fields of the _t_i_m_e_v_a_l structure are zero, then sseelleecctt() returns immediately.  (This is useful for polling.)  If _t_i_m_e_o_u_t is NULL (no  time‐
       out), sseelleecctt() can block indefinitely.

       _s_i_g_m_a_s_k  is  a  pointer  to a signal mask (see ssiiggpprrooccmmaasskk(2)); if it is not NULL, then ppsseelleecctt() first replaces the current signal mask by the one pointed to by
       _s_i_g_m_a_s_k, then does the "select" function, and then restores the original signal mask.

       Other than the difference in the precision of the _t_i_m_e_o_u_t argument, the following ppsseelleecctt() call:

           ready = pselect(nfds, &readfds, &writefds, &exceptfds,
                           timeout, &sigmask);

       is equivalent to _a_t_o_m_i_c_a_l_l_y executing the following calls:

           sigset_t origmask;

           pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
           ready = select(nfds, &readfds, &writefds, &exceptfds, timeout);
           pthread_sigmask(SIG_SETMASK, &origmask, NULL);

       The reason that ppsseelleecctt() is needed is that if one wants to wait for either a signal or for a file descriptor to become ready, then an atomic test is  needed  to
       prevent  race conditions.  (Suppose the signal handler sets a global flag and returns.  Then a test of this global flag followed by a call of sseelleecctt() could hang
       indefinitely if the signal arrived just after the test but just before the call.  By contrast, ppsseelleecctt() allows one to first block signals,  handle  the  signals
       that have come in, then call ppsseelleecctt() with the desired _s_i_g_m_a_s_k, avoiding the race.)

   TThhee ttiimmeeoouutt
       The time structures involved are defined in _<_s_y_s_/_t_i_m_e_._h_> and look like

           struct timeval {
               long    tv_sec;         /* seconds */
               long    tv_usec;        /* microseconds */
           };

       and

           struct timespec {
               long    tv_sec;         /* seconds */
               long    tv_nsec;        /* nanoseconds */
           };

       (However, see below on the POSIX.1 versions.)

       Some code calls sseelleecctt() with all three sets empty, _n_f_d_s zero, and a non-NULL _t_i_m_e_o_u_t as a fairly portable way to sleep with subsecond precision.

       On Linux, sseelleecctt() modifies _t_i_m_e_o_u_t to reflect the amount of time not slept; most other implementations do not do this.  (POSIX.1 permits either behavior.)  This
       causes problems both when Linux code which reads _t_i_m_e_o_u_t is ported to other operating systems, and when code is ported to Linux that reuses a _s_t_r_u_c_t _t_i_m_e_v_a_l  for
       multiple sseelleecctt()s in a loop without reinitializing it.  Consider _t_i_m_e_o_u_t to be undefined after sseelleecctt() returns.

RREETTUURRNN VVAALLUUEE
       On  success, sseelleecctt() and ppsseelleecctt() return the number of file descriptors contained in the three returned descriptor sets (that is, the total number of bits that
       are set in _r_e_a_d_f_d_s, _w_r_i_t_e_f_d_s, _e_x_c_e_p_t_f_d_s) which may be zero if the timeout expires before anything interesting happens.  On error, -1 is returned,  and  _e_r_r_n_o  is
       set to indicate the error; the file descriptor sets are unmodified, and _t_i_m_e_o_u_t becomes undefined.

EERRRROORRSS
       EEBBAADDFF  An  invalid  file  descriptor  was  given in one of the sets.  (Perhaps a file descriptor that was already closed, or one on which an error has occurred.)
              However, see BUGS.

       EEIINNTTRR  A signal was caught; see ssiiggnnaall(7).

       EEIINNVVAALL _n_f_d_s is negative or exceeds the RRLLIIMMIITT__NNOOFFIILLEE resource limit (see ggeettrrlliimmiitt(2)).

       EEIINNVVAALL The value contained within _t_i_m_e_o_u_t is invalid.

       EENNOOMMEEMM Unable to allocate memory for internal tables.

VVEERRSSIIOONNSS
       ppsseelleecctt() was added to Linux in kernel 2.6.16.  Prior to this, ppsseelleecctt() was emulated in glibc (but see BUGS).

CCOONNFFOORRMMIINNGG TTOO
       sseelleecctt() conforms to POSIX.1-2001, POSIX.1-2008, and 4.4BSD (sseelleecctt() first appeared in 4.2BSD).  Generally portable to/from non-BSD systems supporting clones of
       the BSD socket layer (including System V variants).  However, note that the System V variant typically sets the timeout variable before exit, but the BSD variant
       does not.

       ppsseelleecctt() is defined in POSIX.1g, and in POSIX.1-2001 and POSIX.1-2008.

NNOOTTEESS
       An _f_d___s_e_t is a fixed size buffer.  Executing FFDD__CCLLRR() or FFDD__SSEETT() with a value of _f_d that is negative or is equal to or larger than  FFDD__SSEETTSSIIZZEE  will  result  in
       undefined behavior.  Moreover, POSIX requires _f_d to be a valid file descriptor.

       On  some other UNIX systems, sseelleecctt() can fail with the error EEAAGGAAIINN if the system fails to allocate kernel-internal resources, rather than EENNOOMMEEMM as Linux does.
       POSIX specifies this error for ppoollll(2), but not for sseelleecctt().  Portable programs may wish to check for EEAAGGAAIINN and loop, just as with EEIINNTTRR.

       On systems that lack ppsseelleecctt(), reliable (and more portable) signal trapping can be achieved using the self-pipe trick.  In  this  technique,  a  signal  handler
       writes  a  byte  to  a pipe whose other end is monitored by sseelleecctt() in the main program.  (To avoid possibly blocking when writing to a pipe that may be full or
       reading from a pipe that may be empty, nonblocking I/O is used when reading from and writing to the pipe.)

       Concerning the types involved, the classical situation is that the two fields of a _t_i_m_e_v_a_l structure are typed as _l_o_n_g (as shown above),  and  the  structure  is
       defined in _<_s_y_s_/_t_i_m_e_._h_>.  The POSIX.1 situation is

           struct timeval {
               time_t         tv_sec;     /* seconds */
               suseconds_t    tv_usec;    /* microseconds */
           };

       where the structure is defined in _<_s_y_s_/_s_e_l_e_c_t_._h_> and the data types _t_i_m_e___t and _s_u_s_e_c_o_n_d_s___t are defined in _<_s_y_s_/_t_y_p_e_s_._h_>.

       Concerning prototypes, the classical situation is that one should include _<_t_i_m_e_._h_> for sseelleecctt().  The POSIX.1 situation is that one should include _<_s_y_s_/_s_e_l_e_c_t_._h_>
       for sseelleecctt() and ppsseelleecctt().

       Under glibc 2.0, _<_s_y_s_/_s_e_l_e_c_t_._h_> gives the wrong prototype for ppsseelleecctt().  Under glibc 2.1 to 2.2.1, it gives ppsseelleecctt() when __GGNNUU__SSOOUURRCCEE is defined.  Since  glibc
       2.2.2, the requirements are as shown in the SYNOPSIS.

   CCoorrrreessppoonnddeennccee bbeettwweeeenn sseelleecctt(()) aanndd ppoollll(()) nnoottiiffiiccaattiioonnss
       Within the Linux kernel source, we find the following definitions which show the correspondence between the readable, writable, and exceptional condition notifi‐
       cations of sseelleecctt() and the event notifications provided by ppoollll(2) (and eeppoollll(7)):

           #define POLLIN_SET (POLLRDNORM | POLLRDBAND | POLLIN | POLLHUP |
                               POLLERR)
                              /* Ready for reading */
           #define POLLOUT_SET (POLLWRBAND | POLLWRNORM | POLLOUT | POLLERR)
                              /* Ready for writing */
           #define POLLEX_SET (POLLPRI)
                              /* Exceptional condition */

   MMuullttiitthhrreeaaddeedd aapppplliiccaattiioonnss
       If a file descriptor being monitored by sseelleecctt() is closed in another thread, the result is unspecified.  On some UNIX systems, sseelleecctt()  unblocks  and  returns,
       with  an  indication  that  the  file descriptor is ready (a subsequent I/O operation will likely fail with an error, unless another the file descriptor reopened
       between the time sseelleecctt() returned and the I/O operations was performed).  On Linux (and some other systems), closing the file descriptor in another  thread  has
       no effect on sseelleecctt().  In summary, any application that relies on a particular behavior in this scenario must be considered buggy.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The  Linux  kernel allows file descriptor sets of arbitrary size, determining the length of the sets to be checked from the value of _n_f_d_s.  However, in the glibc
       implementation, the _f_d___s_e_t type is fixed in size.  See also BUGS.

       The ppsseelleecctt() interface described in this page is implemented by glibc.  The underlying Linux system call is named ppsseelleecctt66().  This  system  call  has  somewhat
       different behavior from the glibc wrapper function.

       The  Linux ppsseelleecctt66() system call modifies its _t_i_m_e_o_u_t argument.  However, the glibc wrapper function hides this behavior by using a local variable for the time‐
       out argument that is passed to the system call.  Thus, the glibc ppsseelleecctt() function does not modify its _t_i_m_e_o_u_t  argument;  this  is  the  behavior  required  by
       POSIX.1-2001.

       The final argument of the ppsseelleecctt66() system call is not a _s_i_g_s_e_t___t _* pointer, but is instead a structure of the form:

           struct {
               const kernel_sigset_t *ss;   /* Pointer to signal set */
               size_t ss_len;               /* Size (in bytes) of object
                                               pointed to by 'ss' */
           };

       This  allows  the system call to obtain both a pointer to the signal set and its size, while allowing for the fact that most architectures support a maximum of 6
       arguments to a system call.  See ssiiggpprrooccmmaasskk(2) for a discussion of the difference between the kernel and libc notion of the signal set.

BBUUGGSS
       POSIX allows an implementation to define an upper limit, advertised via the constant FFDD__SSEETTSSIIZZEE, on the range of file descriptors that can be specified in a file
       descriptor  set.   The Linux kernel imposes no fixed limit, but the glibc implementation makes _f_d___s_e_t a fixed-size type, with FFDD__SSEETTSSIIZZEE defined as 1024, and the
       FFDD__**() macros operating according to that limit.  To monitor file descriptors greater than 1023, use ppoollll(2) instead.

       According to POSIX, sseelleecctt() should check all specified file descriptors in the three file descriptor sets, up to the limit _n_f_d_s_-_1.  However, the current  imple‐
       mentation  ignores  any  file descriptor in these sets that is greater than the maximum file descriptor number that the process currently has open.  According to
       POSIX, any such file descriptor that is specified in one of the sets should result in the error EEBBAADDFF.

       Glibc 2.0 provided a version of ppsseelleecctt() that did not take a _s_i_g_m_a_s_k argument.

       Starting with version 2.1, glibc provided an emulation of ppsseelleecctt() that was implemented using ssiiggpprrooccmmaasskk(2) and sseelleecctt().  This implementation remained vulner‐
       able  to  the very race condition that ppsseelleecctt() was designed to prevent.  Modern versions of glibc use the (race-free) ppsseelleecctt() system call on kernels where it
       is provided.

       Under Linux, sseelleecctt() may report a socket file descriptor as "ready for reading", while nevertheless a subsequent read blocks.  This  could  for  example  happen
       when  data  has  arrived  but  upon  examination  has wrong checksum and is discarded.  There may be other circumstances in which a file descriptor is spuriously
       reported as ready.  Thus it may be safer to use OO__NNOONNBBLLOOCCKK on sockets that should not block.

       On Linux, sseelleecctt() also modifies _t_i_m_e_o_u_t if the call is interrupted by a signal handler (i.e., the EEIINNTTRR error return).  This is not permitted by  POSIX.1.   The
       Linux  ppsseelleecctt()  system  call has the same behavior, but the glibc wrapper hides this behavior by internally copying the _t_i_m_e_o_u_t to a local variable and passing
       that variable to the system call.

EEXXAAMMPPLLEE
       #include <stdio.h>
       #include <stdlib.h>
       #include <sys/time.h>
       #include <sys/types.h>
       #include <unistd.h>

       int
       main(void)
       {
           fd_set rfds;
           struct timeval tv;
           int retval;

           /* Watch stdin (fd 0) to see when it has input. */

           FD_ZERO(&rfds);
           FD_SET(0, &rfds);

           /* Wait up to five seconds. */

           tv.tv_sec = 5;
           tv.tv_usec = 0;

           retval = select(1, &rfds, NULL, NULL, &tv);
           /* Don't rely on the value of tv now! */

           if (retval == -1)
               perror("select()");
           else if (retval)
               printf("Data is available now.\n");
               /* FD_ISSET(0, &rfds) will be true. */
           else
               printf("No data within five seconds.\n");

           exit(EXIT_SUCCESS);
       }

SSEEEE AALLSSOO
       aacccceepptt(2), ccoonnnneecctt(2), ppoollll(2), rreeaadd(2), rreeccvv(2), rreessttaarrtt__ssyyssccaallll(2), sseenndd(2), ssiiggpprrooccmmaasskk(2), wwrriittee(2), eeppoollll(7), ttiimmee(7)

       For a tutorial with discussion and examples, see sseelleecctt__ttuutt(2).

CCOOLLOOPPHHOONN
       This page is part of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs, and the latest version of this
       page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                                          2017-09-15                                                                      SELECT(2)
